import matplotlib.pyplot as plt
import numpy as np

# --- Data Copied Directly from xgboost.c ---

# Each inner list is a flattened 8x8 = 64 pixel image
# fmt: off
X_test = [
    [0,0,0,0,0,0,0,0,0,30,44,15,11,11,4,0,0,68,117,155,164,174,103,0,0,0,0,3,9,155,44,0,0,0,0,0,49,138,3,0,0,0,0,10,162,33,0,0,0,0,1,104,106,1,0,0,0,0,26,216,27,0,0,0],
    [0,0,64,156,141,10,0,0,0,21,186,78,187,40,0,0,0,2,13,54,201,16,0,0,0,0,13,185,72,0,0,0,0,1,109,159,4,0,0,0,0,12,216,55,17,13,30,50,0,8,178,199,215,179,166,124,0,0,5,8,14,8,2,0],
    [0,0,0,0,7,32,0,0,0,0,0,0,54,69,0,0,0,0,0,1,132,20,0,0,0,0,0,14,155,6,0,0,0,0,0,60,101,0,0,0,0,0,0,133,45,0,0,0,0,0,9,177,16,0,0,0,0,0,4,40,0,0,0,0],
    [0,0,0,19,50,1,0,0,0,0,14,158,207,30,0,0,0,2,137,245,195,199,23,0,0,22,222,94,10,124,161,2,0,46,172,2,5,129,183,4,0,65,183,62,145,236,60,0,0,23,201,243,225,97,3,0,0,0,16,62,27,1,0,0],
    [0,0,1,3,0,1,0,0,0,0,43,57,0,33,41,0,0,6,135,22,0,63,77,0,0,53,110,0,3,157,35,0,0,63,99,35,63,189,7,0,0,8,80,97,104,176,2,0,0,0,0,0,47,165,1,0,0,0,0,0,41,49,0,0],
    [0,0,0,0,2,6,0,0,0,0,0,0,74,137,1,0,0,0,0,4,182,79,0,0,0,0,0,28,211,17,0,0,0,0,0,89,158,1,0,0,0,0,3,169,69,0,0,0,0,0,10,192,16,0,0,0,0,0,4,99,6,0,0,0],
    [0,0,4,3,0,0,2,0,0,6,136,38,0,4,113,12,0,74,116,1,1,79,100,1,0,119,166,101,126,187,11,0,0,7,49,54,123,82,0,0,0,0,0,11,173,13,0,0,0,0,0,55,157,39,0,0,0,0,0,31,118,23,0,0],
    [0,0,0,0,0,0,0,0,0,0,14,112,13,0,0,0,0,1,128,228,166,12,0,0,0,6,161,44,225,61,0,0,0,2,148,184,142,129,1,0,0,0,12,37,9,163,26,0,0,0,0,0,0,51,128,2,0,0,0,0,0,2,123,21],
    [0,0,0,0,5,23,27,23,0,0,4,55,189,225,206,157,0,28,121,35,71,32,12,7,5,163,41,0,0,0,0,0,12,216,178,117,97,50,0,0,0,33,97,226,220,209,9,0,0,0,2,132,223,134,3,0,0,0,0,5,35,3,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,11,46,40,8,0,0,5,92,180,147,192,172,8,0,81,201,79,77,183,202,11,0,21,117,140,233,190,32,0,0,0,2,114,211,22,0,0,0,0,34,219,59,0,0,0,0,0,143,140,2,0,0,0],
    [0,0,4,22,49,28,2,0,0,1,124,182,144,186,92,0,0,7,168,22,1,27,187,9,0,43,130,1,0,5,174,12,0,79,63,0,0,8,178,12,0,104,63,0,5,84,138,2,0,55,169,147,176,174,17,0,0,2,54,77,54,9,0,0],
    [0,0,26,141,6,0,0,0,0,0,120,55,0,0,0,0,0,8,170,11,23,88,77,3,0,37,131,67,180,91,154,24,0,60,124,175,32,2,121,12,0,65,130,87,97,100,106,1,0,9,135,163,173,80,4,0,0,0,2,10,6,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,29,73,30,11,0,0,0,42,181,109,155,80,0,0,7,180,42,27,185,16,0,0,8,184,155,181,134,1,0,0,0,14,39,163,52,0,0,0,0,0,23,181,7,0,0,0,0,0,54,130,0,0,0],
    [0,0,0,2,12,7,0,0,0,0,18,158,212,184,9,0,0,3,147,175,39,176,73,0,0,20,213,40,0,53,155,1,0,49,176,2,0,43,183,4,0,48,179,4,0,63,120,1,0,4,133,64,26,159,29,0,0,0,9,93,127,59,1,0],
    [0,0,0,14,47,0,0,0,0,0,0,70,190,4,0,0,0,0,0,64,197,6,0,0,0,0,0,76,207,7,0,0,0,0,0,76,179,1,0,0,0,0,0,68,197,6,0,0,0,0,1,144,171,5,0,0,0,0,1,47,8,0,0,0],
    [0,0,8,29,70,50,4,0,0,10,183,125,75,17,1,0,0,1,131,48,14,0,0,0,0,14,165,116,140,96,11,0,0,1,8,0,3,44,131,16,0,0,4,0,0,1,76,65,0,23,129,53,68,110,120,11,0,3,44,65,50,23,3,0],
    [0,0,0,0,0,0,0,0,0,0,28,121,132,16,1,0,0,15,166,44,35,119,52,0,0,58,113,0,8,188,35,0,0,57,137,49,125,185,5,0,0,2,62,79,118,110,0,0,0,0,0,2,163,61,0,0,0,0,0,10,190,13,0,0],
    [0,0,0,0,0,0,0,0,10,72,68,42,24,5,0,0,14,116,127,154,193,185,45,0,0,0,0,1,10,125,104,0,0,0,0,0,13,195,52,0,0,0,0,3,131,151,3,0,0,0,0,80,196,18,0,0,0,0,17,211,69,0,0,0],
    [0,13,41,4,0,0,0,0,5,174,199,155,22,0,0,0,12,171,19,104,190,16,0,0,5,113,147,200,239,128,20,0,0,3,45,78,88,136,197,31,0,3,154,83,2,5,133,136,0,0,29,169,166,176,208,75,0,0,0,6,28,39,15,1],
    [0,0,0,0,0,5,0,0,0,0,3,1,1,114,6,0,0,0,95,25,6,137,3,0,0,4,141,18,34,126,0,0,0,15,190,131,164,172,5,0,0,1,13,2,101,62,1,0,0,0,0,0,119,31,0,0,0,0,0,0,83,16,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,10,88,88,19,0,0,0,26,174,215,247,134,0,0,7,188,199,208,226,30,0,0,4,93,72,154,99,1,0,0,0,0,60,181,9,0,0,0,0,13,189,54,0,0,0,0,0,98,164,9,0,0,0],
    [0,0,0,82,137,4,0,0,0,0,19,183,36,1,0,0,0,0,80,110,0,0,0,0,0,0,152,92,73,38,0,0,0,0,154,155,92,185,28,0,0,0,96,90,15,173,39,0,0,0,9,145,174,93,4,0,0,0,0,5,10,0,0,0],
    [0,0,96,20,0,0,0,0,0,7,149,6,0,0,0,0,0,42,128,0,38,107,40,0,0,54,106,6,160,73,145,2,0,26,154,53,121,23,136,2,0,2,107,198,158,153,37,0,0,0,1,51,196,58,0,0,0,0,0,0,10,3,0,0],
    [0,0,0,0,2,12,14,6,0,0,2,74,143,138,108,90,0,0,16,171,21,2,4,4,0,0,54,112,3,0,0,0,0,0,80,164,152,60,0,0,0,0,4,10,60,164,5,0,0,4,74,136,156,33,0,0,0,25,137,60,6,0,0,0],
    [0,0,0,4,0,0,0,0,0,0,32,68,11,9,0,0,0,1,94,13,37,58,0,0,0,25,101,1,68,58,0,0,0,48,109,56,90,105,14,0,0,0,8,16,75,75,2,0,0,0,0,0,29,73,0,0,0,0,0,0,7,81,0,0],
    [0,0,0,2,44,33,5,0,0,1,53,54,222,241,146,3,0,66,232,162,81,160,225,34,8,206,249,101,1,9,200,100,14,238,181,14,36,146,236,63,10,215,230,200,240,245,142,4,1,92,239,248,221,99,5,0,0,2,45,56,19,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,10,14,6,0,0,4,74,99,133,141,132,1,0,25,105,26,2,14,182,8,0,0,0,0,0,7,163,8,0,0,0,0,0,14,132,1,0,0,0,0,0,60,97,0,0,0,0,0,0,113,33,0,0],
    [0,0,0,6,0,0,0,0,0,0,6,139,7,54,35,0,0,0,75,136,2,125,45,0,0,25,187,29,4,163,17,0,0,64,217,185,155,197,9,0,0,2,11,33,85,150,1,0,0,0,0,0,92,108,0,0,0,0,0,0,52,39,0,0],
    [0,0,5,14,13,5,0,0,0,0,69,232,229,172,10,0,0,0,25,181,100,234,67,0,0,1,122,76,2,152,128,0,0,15,181,9,0,111,133,0,0,19,201,18,6,118,79,0,0,11,210,205,197,171,11,0,0,0,45,147,92,18,0,0],
    [0,0,3,49,0,0,0,0,0,0,9,180,15,0,0,0,0,0,0,126,64,0,0,0,0,0,0,139,87,0,0,0,0,0,0,59,152,0,0,0,0,0,0,50,165,1,0,0,0,0,0,49,189,5,0,0,0,0,0,9,50,1,0,0],
    [0,0,0,1,0,0,0,0,0,22,144,172,137,10,0,0,0,29,91,95,223,33,0,0,0,0,16,208,187,32,0,0,0,0,1,45,131,202,17,0,0,0,0,2,71,187,12,0,0,0,43,133,175,31,0,0,0,7,184,113,10,0,0,0],
    [0,0,0,7,1,0,0,0,0,0,0,124,38,0,0,0,0,0,0,91,80,0,0,0,0,0,0,47,149,1,0,0,0,0,0,13,172,6,0,0,0,0,0,6,175,11,0,0,0,0,0,3,172,15,0,0,0,0,0,0,82,25,0,0],
]

Y_test = [7,2,1,0,4,1,4,9,5,9,0,6,9,0,1,5,9,7,3,4,9,6,6,5,4,0,7,4,0,1,3,1]
# fmt: on


def visualize_dataset(images, labels):
    """
    Displays the digit images from the test set with their corresponding labels.
    """
    # Create a grid to display the images. 10 rows, 13 columns.
    fig, axes = plt.subplots(10, 13, figsize=(12, 10))

    # Flatten the axes array for easy iteration
    axes = axes.flatten()

    for i, (image_flat, label) in enumerate(zip(images, labels)):
        if i >= len(axes):
            break

        # Reshape the flat 64-pixel array into an 8x8 image
        image = np.array(image_flat).reshape(8, 8)

        ax = axes[i]
        # Display the image. 'gray_r' shows 0 as white and high values as black.
        ax.imshow(image, cmap=plt.cm.gray_r, interpolation="nearest")

        # Remove axis ticks for a cleaner look
        ax.set_xticks([])
        ax.set_yticks([])

        # Set the title of each subplot to its correct label
        ax.set_title(f"Label: {label}")

    # Hide any unused subplots
    for i in range(len(images), len(axes)):
        axes[i].axis("off")

    # Adjust layout to prevent titles from overlapping
    plt.tight_layout()
    plt.show()


# --- Main execution ---
if __name__ == "__main__":
    print("Displaying the 128 test samples from the C file...")
    visualize_dataset(X_test, Y_test)
    print("Done.")
